addPolygons(
stroke=F,
fillOpacity=0.75,
smoothFactor=0.2,
color=~colorQuantile("Blues", psfdata$X2015_11)(X2015_11)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
)
runApp()
runApp()
runApp()
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
fillOpacity=0.75,
smoothFactor=0.2,
color=~colorQuantile("Blues", psfdata$X2015_11)(X2015_11)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=F,
fillOpacity=0.75,
smoothFactor=0.2,
color=~colorQuantile("Blues", psfdata$X2015_11)(X2015_11)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
fillOpacity=0.75,
smoothFactor=0.2,
color=~colorQuantile("Blues", psfdata$X2015_11)(X2015_11)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
fillOpacity=0.75,
smoothFactor=0.2,
fillColor=~colorQuantile("Blues", psfdata$X2015_11)(X2015_11)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
weight=0.2,
fillOpacity=0.75,
smoothFactor=0.2,
fillColor=~colorQuantile("Blues", psfdata$X2015_11)(X2015_11)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
weight=0.2,
fillOpacity=0.75,
smoothFactor=0.2,
fillColor=~colorQuantile("Blues", psfdata$X2015_11)(X2015_11)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
) %>%
addLegend(
)
colorNumeric()
pal <- colorNumeric( palette="YlGnBu", domain=psfdata$X2015_12 )
pal
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
weight=0.2,
fillOpacity=0.75,
smoothFactor=0.2,
fillColor=~pal(X2015_12)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
weight=0.2,
fillOpacity=0.75,
smoothFactor=0.2,
fillColor=~pal(X2015_12)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
) %>%
addLegend(
pal=pal,
position="bottomright",
title="butts"
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
weight=0.2,
fillOpacity=0.75,
smoothFactor=0.2,
fillColor=~pal(X2015_12)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
) %>%
addLegend(
pal=pal,
position="bottomright",
title="butts",
labFormat=labelFormat(suffix="%")
)
leaflet(psfdata) %>%
addProviderTiles(
"CartoDB.Positron",
options = providerTileOptions( noWrap=T )
) %>%
addPolygons(
stroke=T,
color="black",
weight=0.2,
fillOpacity=0.75,
smoothFactor=0.2,
fillColor=~pal(X2015_12)
) %>%
fitBounds(
-124.848974,
24.396308,
-66.885444,
49.384358
) %>%
addLegend(
pal=pal,
values=psfdata$X2015_12,
position="bottomright",
title="butts",
labFormat=labelFormat(suffix="%")
)
runApp()
runApp()
summary(psfdata)
str(psfdata)
str(psfdata$X2015_!2)
str(psfdata$X2015_12)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
psf <- read.csv("data/psf_by_state.csv")
grepl("01$",colnames(psf))
!grepl("01$",colnames(psf))
rm(counties)
rm(whee)
!grepl("01$",colnames(psf)) & grepl("\d\d$",colnames(psf))
colnames(psf)
keep_these <- c('RegionID','X1996.04','X1997.04','X1998.04','X1999.04','X2000.04','X2001.04',
'X2002.04','X2003.04','X2004.04','X2005.04','X2006.04','X2007.04','X2008.04',
'X2009.04','X2010.04','X2011.04','X2012.04','X2013.04','X2014.04','X2015.04',
'X2016.04')
psf <- psf[,keep_these]
psf
for(n in keep_these){ print(n) }
for(n in keep_these[2:]){ print(n) }
for(n in keep_these[2:5]){ print(n) }
for(n in keep_these[2:25]){ print(n) }
for(n in keep_these[2:22]){ print(n) }
a <- "2016"
psf <- rename(psf, a=X2016.04)
colnames(psf)
names(psf) <- gsub("X","", names(d))
names(psf) <- gsub("X","", names(psf))
names(psf)
names(psf) <- gsub(".\\d\\d","", names(psf))
names(psf)
psf <- read.csv("data/psf_by_state.csv")
names(psf) <- gsub("\\.\\d\\d$","", names(psf))
names(psf)
psf <- read.csv("data/psf_by_state.csv")
keep_these <- c('RegionID','X1996.04','X1997.04','X1998.04','X1999.04','X2000.04','X2001.04',
'X2002.04','X2003.04','X2004.04','X2005.04','X2006.04','X2007.04','X2008.04',
'X2009.04','X2010.04','X2011.04','X2012.04','X2013.04','X2014.04','X2015.04',
'X2016.04')
psf <- psf[,keep_these]
psf <- rename(psf, GEOID=RegionID)
names(psf) <- gsub("X","", names(psf))
names(psf) <- gsub("\\.\\d\\d$","", names(psf))
psf
states <- readOGR("shp/cb_2015_us_state_20m.shp", layer="cb_2015_us_state_20m", verbose=F)
states$GEOID <- as.numeric(levels(states$GEOID))[states$GEOID]
states@data <- left_join(states@data, psf)
states
writeOGR(states, "shp/", "states_per_square_foot", driver="ESRI Shapefile")
writeOGR(states, "shp/", "states_per_square_foot", driver="ESRI Shapefile")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
psf <- read.csv("data/psf_by_state.csv")
keep_these <- c('RegionID','X1996.04','X1997.04','X1998.04','X1999.04','X2000.04','X2001.04',
'X2002.04','X2003.04','X2004.04','X2005.04','X2006.04','X2007.04','X2008.04',
'X2009.04','X2010.04','X2011.04','X2012.04','X2013.04','X2014.04','X2015.04',
'X2016.04')
psf <- psf[,keep_these]
psf <- rename(psf, GEOID=RegionID)
#names(psf) <- gsub("X","", names(psf))
names(psf) <- gsub("\\.\\d\\d$","", names(psf))
states <- readOGR("shp/cb_2015_us_state_20m.shp", layer="cb_2015_us_state_20m", verbose=F)
states$GEOID <- as.numeric(levels(states$GEOID))[states$GEOID]
states@data <- left_join(states@data, psf)
writeOGR(states, "shp/", "states_per_square_foot", driver="ESRI Shapefile")
psfdata <- readOGR( "shp/states_per_square_foot.shp", layer="states_per_square_foot", verbose=F )
psfdata
psf <- read.csv("data/psf_by_state.csv")
keep_these <- c('RegionID','X1996.04','X1997.04','X1998.04','X1999.04','X2000.04','X2001.04',
'X2002.04','X2003.04','X2004.04','X2005.04','X2006.04','X2007.04','X2008.04',
'X2009.04','X2010.04','X2011.04','X2012.04','X2013.04','X2014.04','X2015.04',
'X2016.04')
psf <- psf[,keep_these]
psf <- rename(psf, GEOID=RegionID)
names(psf) <- gsub("X","PSF_", names(psf))
names(psf) <- gsub("\\.\\d\\d$","", names(psf))
states <- readOGR("shp/cb_2015_us_state_20m.shp", layer="cb_2015_us_state_20m", verbose=F)
states$GEOID <- as.numeric(levels(states$GEOID))[states$GEOID]
states@data <- left_join(states@data, psf)
writeOGR(states, "shp/", "states_per_square_foot", driver="ESRI Shapefile")
runApp()
runApp()
runApp()
runApp()
paste("PSF","2011",sep="_"
)
runApp()
runApp()
psfdata[,paste("PSF","2011",sep="_")]
psfdata[[paste("PSF","2011",sep="_")]]
paste("PSF","2011",sep="_")
psfdata[,eval(paste("PSF","2011",sep="_"))]
eval(paste("PSF","2011",sep="_"))
eval(quote(paste("PSF","2011",sep="_")))
~pal(eval(quote(paste("PSF","2011",sep="_"))))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
psf$PSF_1997
psf['PSF_1997']
unlist(psf['PSF_1997'])
psfdata
psfdata$X1996
shiny::runApp()
shiny::runApp()
?colorNumeric
pal
pal(100)
~pal(100)
shiny::runApp()
shiny::runApp()
?pal
??pal
shiny::runApp()
shiny::runApp()
shiny::runApp()
showcol <- paste( 'PSF', 2007 ,sep="_" )
showcol
psfdata[showcol]
psfdata[[showcol]
]
psfdata
psfdata['X1996']
psfdata['X1996']['X1996']
psfdata['X1996'](X1996)
psfdata(X1996)
shiny::runApp()
psfdata$X1999
psfdata['1999']
psfdata[['1999']]
class(psfdata)
spfdata@data
psfdata@data
psfdata@data['X1999']
shiny::runApp()
psfdata@polygons
psfdata@data
shiny::runApp()
psfdata@data['X1999']
shiny::runApp()
psfdata@proj4string
psfdata@plotOrder
psfdata@data$GEOID
shiny::runApp()
shiny::runApp()
tagList(psfdata)
tagList(psfdata@data)
tagList(psfdata@data$X1999)
shiny::runApp()
?writeOGR
ogrListLayers("shp/states_per_square_foot")
ogrListLayers("shp/states_per_square_foot.shp")
shiny::runApp()
shiny::runApp()
centileBreaks <- hist(plot = FALSE, 40:500, breaks = 20)$breaks
centileBreaks
psfdata@data$X2014$centile
psfdata@data$centile
psfdata@centile
hist(psfdata@data$X2016)
hist(psfdata@data['X2016'])
psfdata@data$X2016
psfdata@data['X2016']
class(psfdata@data$X2016)
class(psfdata@data['X2016'])
hist(as.integer(psfdata@data['X2016']))
as.integer(psfdata@data['X2016'])
list((psfdata@data['X2016']))
as.integer(list((psfdata@data['X2016'])))
as.vector(psfdata@data['X2016'])
class(as.vector(psfdata@data['X2016']))
av <- as.vector(psfdata@data['X2016'])
class(av)
av <- as.vector(psfdata@data[['X2016']])
class(av)
av
a <- 'X2016'
av <- as.vector(psfdata@data[[a]])
av
hist(as.vector(psfdata@data[[a]]))
hist(as.vector(psfdata@data[['X2011']]))
shiny::runApp()
shiny::runApp()
shiny::runApp()
?fluidPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jeturcotte',
token='3AE968B7C6B776F495C2CFC2EE78F889',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeturcotte',token='3AE968B7C6B776F495C2CFC2EE78F889',secret='bPwrT4papdbqsbv9W0xTjXCvKM/gFYsPrIwBcUJF')
library(rsconnect)
rsconnect:deployApp('~/R/PROJECTS/per-square-foot/')
deployApp('~/R/PROJECTS/per-square-foot/')
?readOGR
??readOGR
deployApp('~/R/PROJECTS/per-square-foot/')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
inflate_by <- data.frame(
JAN_2016 = 0.0,
JAN_2015 = 0.47,
JAN_2014 = 0.59,
JAN_2013 = 2.22,
JAN_2012 = 3.72,
JAN_2011 = 5.87,
JAN_2010 = 9.21,
JAN_2009 = 11.00,
JAN_2008 = 10.60,
JAN_2007 = 14.85,
JAN_2006 = 18.12,
JAN_2005 = 21.93,
JAN_2004 = 26.06,
JAN_2003 = 29.42,
JAN_2002 = 32.37,
JAN_2001 = 34.46,
JAN_2000 = 38.29,
JAN_1999 = 42.96,
JAN_1998 = 46.09,
JAN_1997 = 48.37,
JAN_1996 = 51.77
)
summary(inflate_by)
inflate_by$JAN_2013
inflate_by[['JAN_2013']]
a <- 'JAN_2013'
inflate_by[[a]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp('~/R/PROJECTS/per-square-foot/')
shiny::runApp()
shiny::runApp()
deployApp('~/R/PROJECTS/per-square-foot/')
library(slidify)
author("TitlePage")
setwd("~/R/PROJECTS")
author("per-square-foot",use_git=F)
author("per-square-foot",use_git=F)
